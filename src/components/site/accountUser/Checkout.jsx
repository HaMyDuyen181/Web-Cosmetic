import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate, useLocation } from "react-router-dom";

const Checkout = () => {
  const [customerName, setCustomerName] = useState("");
  const [address, setAddress] = useState(""); // L∆∞u ƒë·ªãa ch·ªâ ng∆∞·ªùi d√πng
  const [statusOrderId] = useState(1); // Gi·∫£ s·ª≠ tr·∫°ng th√°i l√† "ƒêang x·ª≠ l√Ω"
  const navigate = useNavigate();
  const location = useLocation();
  const cartItems = location.state?.cartItems || [];

  useEffect(() => {
    // L·∫•y token t·ª´ localStorage
    const token = localStorage.getItem("token-user");
    const userId = localStorage.getItem("userId");

    if (userId && token) {
      // Th·ª±c hi·ªán y√™u c·∫ßu API ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      axios
        .get(`https://localhost:7177/api/User/${userId}`, {
          headers: {
            Authorization: `Bearer ${token}`, // Th√™m token v√†o header
          },
        })
        .then((response) => {
          setCustomerName(response.data.fullname); // L∆∞u t√™n ng∆∞·ªùi d√πng
        })
        .catch((err) => {
          console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", err);
          alert("C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
        });
    }
  }, []);

  const handleConfirmPayment = () => {
    const userId = localStorage.getItem("userId");
    const token = localStorage.getItem("token-user");

    // T·∫°o request cho Order
    const orderRequest = {
      customerName, // T√™n kh√°ch h√†ng ƒë√£ t·ª± ƒë·ªông l·∫•y
      statusOrderId,
      userId: parseInt(userId),
      address, // ƒê·ªãa ch·ªâ ng∆∞·ªùi d√πng
      items: cartItems.map((item) => ({
        productId: item.productId,
        quantity: item.quantity,
        priceAfterDiscount: item.priceAfterDiscount, // Th√™m gi√° sau gi·∫£m gi√°
      })),
    };

    // G·ª≠i y√™u c·∫ßu t·∫°o ƒë∆°n h√†ng v·ªõi token trong header
    axios
      .post("https://localhost:7177/api/Order/create", orderRequest, {
        headers: {
          Authorization: `Bearer ${token}`, // Th√™m token v√†o header
        },
      })
      .then((response) => {
        alert("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
        navigate(`/order/${response.data.id}`);
      })
      .catch((err) => {
        console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", err);
        alert("C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng.");
      });
  };

  return (
    <div className="container mt-5">
      <h2 className="text-center mb-4">üõí X√°c nh·∫≠n thanh to√°n</h2>

      <div className="card">
        <div className="card-body">
          <form>
            {/* Hi·ªÉn th·ªã t√™n kh√°ch h√†ng t·ª± ƒë·ªông */}
            <div className="form-group mb-3">
              <label htmlFor="customerName" className="form-label">
                T√™n kh√°ch h√†ng:
              </label>
              <input
                type="text"
                className="form-control"
                id="customerName"
                value={customerName}
                readOnly
              />
            </div>

            {/* Nh·∫≠p ƒë·ªãa ch·ªâ */}
            <div className="form-group mb-3">
              <label htmlFor="address" className="form-label">
                ƒê·ªãa ch·ªâ giao h√†ng:
              </label>
              <input
                type="text"
                className="form-control"
                id="address"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                required
              />
            </div>

            <h4 className="mb-3">Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng:</h4>
            <table className="table table-striped">
              <thead>
                <tr>
                  <th scope="col">S·∫£n ph·∫©m</th>
                  <th scope="col">S·ªë l∆∞·ª£ng</th>
                  <th scope="col">Gi√°</th>
                  <th scope="col">Gi·∫£m gi√°</th>
                  <th scope="col">T·ªïng</th>
                </tr>
              </thead>
              <tbody>
                {cartItems.map((item) => (
                  <tr key={item.productId}>
                    <td>{item.productName}</td>
                    <td>{item.quantity}</td>
                    <td>{item.price.toLocaleString()} ƒë</td>
                    <td>{item.discount}%</td>
                    <td>
                      {(item.priceAfterDiscount * item.quantity).toLocaleString()} ƒë
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            <div className="d-flex justify-content-between align-items-center mt-3">
              <h5>
                T·ªïng ti·ªÅn:{" "}
                {cartItems
                  .reduce(
                    (total, item) => total + item.priceAfterDiscount * item.quantity,
                    0
                  )
                  .toLocaleString()}{" "}
                ƒë
              </h5>
              <button
                type="button"
                className="btn btn-primary"
                onClick={handleConfirmPayment}
              >
                X√°c nh·∫≠n thanh to√°n
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Checkout;
